<?php
/**
 * Neevo - Tiny open-source database abstraction layer for PHP
 *
 * Copyright 2010 Martin Srank (http://smasty.net)
 *
 * This source file is subject to the MIT license that is bundled
 * with this package in the file license.txt.
 *
 * @author   Martin Srank (http://smasty.net)
 * @license  http://www.opensource.org/licenses/mit-license.php  MIT license
 * @link     http://neevo.smasty.net/
 * @package  Neevo
 *
 */if(version_compare(PHP_VERSION,'5.1.0','<')){if(version_compare(PHP_VERSION,'5.0.0','>='))throw
new
Exception('Neevo requires PHP version 5.1.0 or newer');if(version_compare(PHP_VERSION,'5.0.0','<'))trigger_error('Neevo requires PHP version 5.1.0 or newer',E_USER_ERROR);exit;}class
NeevoConnection{private$neevo,$driver,$username,$password,$host,$database,$encoding,$table_prefix;public
function
__construct(Neevo$neevo,INeevoDriver$driver,$user,$pswd=null,$host,$database,$encoding=null,$table_prefix=null){$this->neevo=$neevo;$this->driver=$driver;$this->username=$user;$this->password=$pswd;$this->host=$host;$this->database=$database;$this->encoding=$encoding;$this->table_prefix=$table_prefix;$this->driver()->connect($this->getVars());}private
function
driver(){return$this->driver;}public
function
getVars(){$options=get_object_vars($this);unset($options['neevo'],$options['driver'],$options['resource']);return$options;}public
function
prefix(){return$this->table_prefix;}public
function
info($hide_password=true){$info=$this->getVars();if($hide_password)$info['password']='*****';$info['driver']=str_replace('NeevoDriver','',get_class($this->driver));return$info;}}interface
INeevoDriver{public
function
__construct(Neevo$neevo);public
function
connect(array$opts);public
function
close();public
function
free($resultSet);public
function
query($query_string);public
function
error($neevo_msg);public
function
fetch($resultSet);public
function
seek($resultSet,$row_number);public
function
insertId();public
function
rand(NeevoQuery$query);public
function
rows($resultSet);public
function
affectedRows();public
function
build(NeevoQuery$query);public
function
escape($value,$type);public
function
neevo();}class
NeevoDriverMySQL
extends
NeevoDriver
implements
INeevoDriver{private$neevo,$resource;public
function
__construct(Neevo$neevo){if(!extension_loaded("mysql"))throw
new
NeevoException("PHP extension 'mysql' not loaded.");$this->neevo=$neevo;}public
function
connect(array$opts){$connection=@mysql_connect($opts['host'],$opts['username'],$opts['password']);if(!is_resource($connection))$this->neevo()->error("Connection to host '".$opts['host']."' failed");if($opts['database']){$db=mysql_select_db($opts['database']);if(!$db)$this->neevo()->error("Could not select database '{$opts['database']}'");}if($opts['encoding']&&is_resource($connection)){if(function_exists('mysql_set_charset'))$ok=@mysql_set_charset($opts['encoding'],$connection);if(!$ok)$this->neevo()->sql("SET NAMES ".$opts['encoding'])->run();}$this->resource=$connection;}public
function
close(){@mysql_close($this->resource);}public
function
free($resultSet){return@mysql_free_result($resultSet);}public
function
query($query_string){return@mysql_query($query_string,$this->resource);}public
function
error($neevo_msg){$mysql_msg=mysql_error();$mysql_msg=str_replace('You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use','Syntax error',$mysql_msg);$msg=$neevo_msg.".";if($mysql_msg)$msg.=" ".$mysql_msg;return$msg;}public
function
fetch($resultSet){return@mysql_fetch_assoc($resultSet);}public
function
seek($resultSet,$row_number){return@mysql_data_seek($resultSet,$row_number);}public
function
insertId(){return
mysql_insert_id($this->resource);}public
function
rand(NeevoQuery$query){$query->order('RAND()');}public
function
rows($resultSet){return
mysql_num_rows($resultSet);}public
function
affectedRows(){return
mysql_affected_rows($this->resource);}public
function
build(NeevoQuery$query){$where='';$order='';$limit='';$q='';if($query->getSql())$q=$query->getSql();else{$table=$query->getTable();if($query->getWhere())$where=$this->buildWhere($query);if($query->getOrder())$order=$this->buildOrder($query);if($query->getLimit())$limit=" LIMIT ".$query->getLimit();if($query->getOffset())$limit.=" OFFSET ".$query->getOffset();if($query->getType()=='select'){$cols=$this->buildSelectCols($query);$q.="SELECT $cols FROM $table$where$order$limit";}elseif($query->getType()=='insert'&&$query->getData()){$insert_data=$this->buildInsertData($query);$q.="INSERT INTO $table$insert_data";}elseif($query->getType()=='update'&&$query->getData()){$update_data=$this->buildUpdateData($query);$q.="UPDATE $table$update_data$where$order$limit";}elseif($query->getType()=='delete')$q.="DELETE FROM $table$where$order$limit";}return"$q;";}public
function
escape($value,$type){switch($type){case
Neevo::BOOL:return$value?1:0;case
Neevo::TEXT:return"'".mysql_real_escape_string($value)."'";break;case
Neevo::BINARY:return"_binary'".mysql_real_escape_string($value)."'";case
Neevo::DATETIME:return($value
instanceof
DateTime)?$value->format("'Y-m-d H:i:s'"):date("'Y-m-d H:i:s'",$value);case
Neevo::DATE:return($value
instanceof
DateTime)?$value->format("'Y-m-d'"):date("'Y-m-d'",$value);default:$this->neevo()->error('Unsupported data type');break;}}public
function
neevo(){return$this->neevo;}}class
NeevoDriver{protected
function
buildWhere(NeevoQuery$query){$conds=$query->getWhere();unset($conds[count($conds)-1][3]);foreach($conds
as&$cond){$cond[0]=$this->buildColName($cond[0]);if($cond[2]===true){unset($cond[1],$cond[2]);}elseif($cond[2]===false){$x=$cond[0];$cond[0]='NOT';$cond[1]=$cond[0];unset($cond[2]);}elseif(is_array($cond[2]))$cond[2]='('.join(', ',$this->_escapeArray($cond[2])).')';elseif($cond[2]!=='NULL')$cond[2]=$this->_escapeString($cond[2]);$cond=join(' ',$cond);}return' WHERE '.join(' ',$conds);}protected
function
buildInsertData(NeevoQuery$query){foreach($this->_escapeArray($query->getData())as$col=>$value){$cols[]=$col;$values[]=$value;}return' ('.join(', ',$cols).') VALUES ('.join(', ',$values).')';}protected
function
buildUpdateData(NeevoQuery$query){foreach($this->_escapeArray($query->getData())as$col=>$value){$update[]=$col.' = '.$value;}return' SET '.join(', ',$update);}protected
function
buildOrder(NeevoQuery$query){return' ORDER BY '.join(', ',$query->getOrder());}protected
function
buildSelectCols(NeevoQuery$query){foreach($query->getCols()as$col){$cols[]=$this->buildColName($col);}return
join(', ',$cols);}protected
function
buildColName($col){$col=trim($col);$prefix=$this->neevo()->connection()->prefix();if(preg_match('#([^.]+)(\.)([^.]+)#',$col))return$prefix.$col;return$col;}protected
function
_escapeArray(array$array,$sql_funcs=false){foreach($array
as&$value){if(is_bool($value))$value=$this->escape($value,Neevo::BOOL);elseif(is_numeric($value)){if(is_int($value))$value=intval($value);elseif(is_float($value))$value=floatval($value);else$value=$this->_escapeString($value,$sql_funcs);}elseif(is_string($value))$value=$this->_escapeString($value);elseif($value
instanceof
DateTime)$value=$this->escape($value,Neevo::DATETIME);elseif($value
instanceof
NeevoLiteral)$value=(string)$value;else$value=$this->_escapeString((string)$value);}return$array;}protected
function
_escapeString($string,$sql_funcs=false){if(get_magic_quotes_gpc())$string=stripslashes($string);return$this->escape($string,Neevo::TEXT);}}class
NeevoQuery{private$table,$type,$limit,$offset,$neevo,$resultSet,$time,$sql,$performed,$numRows,$affectedRows;private$where=array(),$order=array(),$columns=array(),$data=array();public
function
__construct(Neevo$object){$this->neevo=$object;}public
function
select($cols){$this->setType('select');$this->columns=is_string($cols)?explode(',',$cols):$cols;return$this;}public
function
from($table){$this->setTable($table);return$this;}public
function
update($table){$this->setType('update');$this->setTable($table);return$this;}public
function
set(array$data){$this->data=$data;return$this;}public
function
insert($table){$this->setType('insert');$this->setTable($table);return$this;}public
function
insertInto($table){return$this->insert($table);}public
function
values(array$data){$this->data=$data;return$this;}public
function
delete($table=null){$this->setType('delete');if(isset($table))$this->setTable($table);return$this;}public
function
where($condition,$value=true,$glue='AND'){$condition=trim($condition);$column=strstr($condition,' ')?substr($condition,0,strpos($condition,' ')):$condition;$operator=strstr($condition,' ')?substr($condition,strpos($condition,' ')+1):null;if(is_null($value)){$operator='IS';$value='NULL';}elseif($value===true){$operator='';$value=true;}elseif($value===false){$operator='';$value=false;}elseif(is_array($value))$operator=(strtoupper($operator)=='NOT')?'NOT IN':'IN';if(!isset($operator))$operator='=';$this->where[]=array($column,$operator,$value,strtoupper($glue));return$this;}public
function
order($rules){$this->order=func_get_args();return$this;}public
function
orderBy($rules){return$this->order($rule);}public
function
limit($limit,$offset=null){$this->limit=$limit;if(isset($offset)&&$this->getType()=='select')$this->offset=$offset;return$this;}public
function
rand(){$this->neevo()->driver()->rand($this);return$this;}public
function
sql($sql){$this->sql=$sql;$this->setType('sql');return$this;}public
function
dump($color=true,$return_string=false){$code=$color?self::_highlightSql($this->build()):$this->build();if(!$return_string)echo$code;return$return_string?$code:$this;}public
function
run(){$start=explode(' ',microtime());$query=$this->neevo()->driver()->query($this->build());if($query===false){$this->neevo()->error('Query failed');return
false;}$this->neevo()->incrementQueries();$this->neevo()->setLast($this);$end=explode(" ",microtime());$time=round(max(0,$end[0]-$start[0]+$end[1]-$start[1]),4);$this->setTime($time);$this->performed=true;if(is_resource($query)){$this->resultSet=$query;$this->numRows=$this->neevo()->driver()->rows($query);}else$this->affectedRows=$this->neevo()->driver()->affectedRows();return$query;}public
function
fetch(){$rows=array();if(!in_array($this->getType(),array('select','sql')))return$this->neevo()->error('Cannot fetch on this kind of query');$resultSet=$this->isPerformed()?$this->resultSet():$this->run();if(!is_resource($resultSet))return$this->neevo()->error('Fetching result data failed');while($tmp_rows=$this->neevo()->driver()->fetch($resultSet))$rows[]=new
NeevoRow($tmp_rows,$this);$this->free();if(empty($rows))return
false;return
new
NeevoResult($rows,$this);}public
function
fetchSingle(){$result=$this->fetch();if($result
instanceof
NeevoResult){if(count($result)>1)return$result[0];return$result[0]->getSingle();}return
false;}public
function
fetchPairs($key,$value){if(!in_array($key,$this->columns)||!in_array($value,$this->columns)||!in_array('*',$this->columns)){$this->columns=array($key,$value);$this->performed=false;}$result=$this->fetch();if($result
instanceof
NeevoResult){$rows=array();foreach($result
as$row)$rows[$row[$key]]=$row[$value];unset($result);return$rows;}return
false;}public
function
fetchArray(){$result=$this->fetch();if($result
instanceof
NeevoResult){$rows=array();foreach($result
as$row)$rows[]=$row->toArray();unset($result);return$rows;}return
false;}public
function
fetchAssoc($column,$as_array=false){if(!in_array($column,$this->columns)||!in_array('*',$this->columns)){$this->columns[]=$column;$this->performed=false;}$result=$this->fetch();if($result
instanceof
NeevoResult){$rows=array();foreach($result
as$row){if($as_array)$row=$row->toArray();$rows[$row[$column]]=$row;}unset($result);return$rows;}return
false;}private
function
free(){$this->neevo()->driver()->free($this->resultSet);$this->resultSet=null;}public
function
seek($row_number){if(!$this->isPerformed())$this->run();$seek=$this->neevo()->driver()->seek($this->resultSet(),$row_number);return$seek?$seek:$this->neevo()->error("Cannot seek to row $row_number");}public
function
insertId(){if(!$this->isPerformed())$this->run();return$this->neevo()->driver()->insertId();}public
function
rows(){if(!$this->isPerformed())$this->run();return$this->numRows;}public
function
affectedRows(){if(!$this->isPerformed())$this->run();return$this->affectedRows;}public
function
build(){return$this->neevo()->driver()->build($this);}public
function
info($hide_password=true,$exclude_connection=false){$info=array('type'=>$this->getType(),'table'=>$this->getTable(),'executed'=>(bool)$this->isPerformed(),'query_string'=>$this->dump(false,true));if($exclude_connection==true)$this->neevo()->connection()->info($hide_password);if($this->isPerformed()){$info['time']=$this->time();if(isset($this->numRows))$info['rows']=$this->numRows;if(isset($this->affectedRows))$info['affected_rows']=$this->affectedRows;if($this->getType()=='insert')$info['last_insert_id']=$this->insertId();}return$info;}public
function
setTime($time){$this->time=$time;}public
function
setTable($table){$this->table=$table;return$this;}public
function
setType($type){$this->type=$type;return$this;}public
function
time(){return$this->time;}public
function
neevo(){return$this->neevo;}public
function
resultSet(){return$this->resultSet;}public
function
isPerformed(){return$this->performed;}public
function
getTable(){$table=$this->table;$prefix=$this->neevo()->connection()->prefix();if(preg_match('#([^.]+)(\.)([^.]+)#',$table))return
str_replace('.',".$prefix",$table);return$prefix.$table;}public
function
getType(){return$this->type;}public
function
getLimit(){return$this->limit;}public
function
getOffset(){return$this->offset;}public
function
getSql(){return$this->sql;}public
function
getWhere(){return$this->where;}public
function
getOrder(){return$this->order;}public
function
getCols(){return$this->columns;}public
function
getData(){return$this->data;}public
function
getPrimary(){$return=null;$table=preg_replace('#[^0-9a-z_.]#i','',$this->getTable());$cached_primary=$this->neevo()->cacheLoad('table_'.$table.'_primary');if(is_null($cached_primary)){$q=$this->neevo()->sql('SHOW FULL COLUMNS FROM '.$table);foreach($q->fetch(Neevo::MULTIPLE)as$col){if($col['Key']==='PRI'&&!isset($return))$return=$col['Field'];}$this->neevo()->cacheSave('table_'.$table.'_primary',$return);return$return;}return$cached_primary;}private
static
function
_highlightSql($sql){$color_codes=array('chars'=>'chars','keywords'=>'kwords','joins'=>'joins','functions'=>'funcs','constants'=>'consts');$colors=Neevo::$highlight_colors;unset($colors['columns']);$words=array('keywords'=>array('SELECT','UPDATE','INSERT','DELETE','REPLACE','INTO','CREATE','ALTER','TABLE','DROP','TRUNCATE','FROM','ADD','CHANGE','COLUMN','KEY','WHERE','ON','CASE','WHEN','THEN','END','ELSE','AS','USING','USE','INDEX','CONSTRAINT','REFERENCES','DUPLICATE','LIMIT','OFFSET','SET','SHOW','STATUS','BETWEEN','AND','IS','NOT','OR','XOR','INTERVAL','TOP','GROUP BY','ORDER BY','DESC','ASC','COLLATE','NAMES','UTF8','DISTINCT','DATABASE','CALC_FOUND_ROWS','SQL_NO_CACHE','MATCH','AGAINST','LIKE','REGEXP','RLIKE','PRIMARY','AUTO_INCREMENT','DEFAULT','IDENTITY','VALUES','PROCEDURE','FUNCTION','TRAN','TRANSACTION','COMMIT','ROLLBACK','SAVEPOINT','TRIGGER','CASCADE','DECLARE','CURSOR','FOR','DEALLOCATE'),'joins'=>array('JOIN','INNER','OUTER','FULL','NATURAL','LEFT','RIGHT'),'functions'=>array('MIN','MAX','SUM','COUNT','AVG','CAST','COALESCE','CHAR_LENGTH','LENGTH','SUBSTRING','DAY','MONTH','YEAR','DATE_FORMAT','CRC32','CURDATE','SYSDATE','NOW','GETDATE','FROM_UNIXTIME','FROM_DAYS','TO_DAYS','HOUR','IFNULL','ISNULL','NVL','NVL2','INET_ATON','INET_NTOA','INSTR','FOUND_ROWS','LAST_INSERT_ID','LCASE','LOWER','UCASE','UPPER','LPAD','RPAD','RTRIM','LTRIM','MD5','MINUTE','ROUND','SECOND','SHA1','STDDEV','STR_TO_DATE','WEEK','RAND'),'chars'=>'/([\\.,!\\(\\)<>:=`]+)/i','constants'=>'/(\'[^\']*\'|[0-9]+)/i');$sql=str_replace('\\\'','\\&#039;',$sql);foreach($color_codes
as$key=>$code){$regexp=in_array($key,array('constants','chars'))?$words[$key]:'/\\b('.join("|",$words[$key]).')\\b/i';$sql=preg_replace($regexp,"<span style=\"color:$code\">$1</span>",$sql);}$sql=str_replace($color_codes,$colors,$sql);return'<code style="color:'.Neevo::$highlight_colors['columns'].'">'.$sql.'</code>'.PHP_EOL;}}class
NeevoResult
implements
ArrayAccess,Countable,IteratorAggregate{private$data=array();private$query;public
function
__construct(array$data,NeevoQuery$query){$this->query=$query;foreach($data
as$key=>$value)is_array($value)?$this->data[$key]=new
NeevoRow($value,$this->query()):$this->data[$key]=$value;}public
function
query(){return$this->query;}public
function
data(){return$this->data;}public
function
offsetSet($offset,$value){if(is_null($offset))$this->data[]=$value;else$this->data[$offset]=$value;}public
function
offsetExists($offset){return
isset($this->data[$offset]);}public
function
offsetUnset($offset){unset($this->data[$offset]);}public
function
offsetGet($offset){return
isset($this->data[$offset])?$this->data[$offset]:null;}public
function
toArray(){if(!$this->data[0]instanceof
NeevoRow)return$this->data();$rows=array();foreach($this->data()as$row){$rows[]=$row->toArray();}return$rows;}public
function
count(){return
count($this->data);}public
function
getIterator(){return
new
ArrayIterator($this->data);}public
function
dump($return_dump=false){$return='';if(!empty($this->data)){$count=count($this->data);foreach($this->data
as$key=>$value){$return.='  '.$key.' => ';$len=strlen($value);if(is_bool($value))$return.=$value?"(bool) <strong>TRUE</strong>":"(bool) <strong>FALSE</strong>";elseif(is_int($value))$return.="(int:$len) <strong>$value</strong>";elseif(is_float($value))$return.="(float:$len) <strong>$value</strong>";elseif(is_numeric($value))$return.="(int:$len) <strong>$value</strong>";elseif(is_string($value))$return.="(string:$len) \"<strong>$value</strong>\"";elseif(is_object($value))$return.=str_replace(array("\n",'<pre class="dump">','</pre>'),"\n    ",$value->dump(true));else$return.="(unknown type) \"<strong>".(string)$value."</strong>\"";$return.="\n";}$return="<pre class=\"dump\">\n<strong>NeevoResult</strong> ($count) {\n$return}</pre>";}else$return='<pre class="dump">\n<strong>NeevoResult</strong> (empty)</pre>';if($return_dump)return$return;echo$return;}}class
NeevoRow
implements
ArrayAccess,Countable,IteratorAggregate,Serializable{private$data=array(),$modified=array(),$query,$single=false;public
function
__construct($data,NeevoQuery$query){$this->data=$data;if(count($data)===1){$this->single=true;$keys=array_keys($this->data);$this->data=$this->data[$keys[0]];}$this->query=$query;}public
function
__get($name){return$this->data[$name];}public
function
__set($name,$value){$this->modified[$name]=$value;}public
function
__isset($name){return
isset($this->data[$name]);}public
function
__unset($name){unset($this->data[$name]);}public
function
__toString(){if($this->single===true)return(string)$this->data;return'';}public
function
isSingle(){return$this->single;}public
function
getSingle(){if($this->isSingle())return$this->data;}public
function
toArray(){return$this->data;}public
function
query(){return$this->query;}public
function
update(){if(!empty($this->modified)&&$this->modified!==$this->data){$q=$this->query();$primary=$q->getPrimary();if(!$this->data[$primary])return$this->query()->neevo()->error('Cannot get primary_key value');return$q->neevo()->update($q->getTable())->set($this->modified)->where($primary,$this->data[$primary])->limit(1)->run();}}public
function
delete(){$q=$this->query();$primary=$q->getPrimary();if($primary===null)return$this->query()->neevo()->error('Cannot get primary_key value');return$q->neevo()->delete($q->getTable())->where($primary,$this->data[$primary])->limit(1)->run();}public
function
offsetSet($offset,$value){if(isset($this->data[$offset]))$this->modified[$offset]=$value;}public
function
offsetExists($offset){return
isset($this->data[$offset]);}public
function
offsetUnset($offset){unset($this->modified[$offset]);}public
function
offsetGet($offset){return
isset($this->modified[$offset])?$this->modified[$offset]:isset($this->data[$offset])?$this->data[$offset]:null;}public
function
count(){return
count($this->data);}public
function
getIterator(){return
new
ArrayIterator($this->data);}public
function
serialize(){return
serialize($this->data);}public
function
unserialize($serialized){$this->data=unserialize($serialized);}public
function
dump($return_dump=false){$return='';if($this->single)$return="(NeevoRow-single:".strlen($this->data).") \"<strong>$this->data</strong>\"";else{if(!empty($this->data)){$count=count($this->data);foreach($this->data
as$key=>$value){$return.="  [$key] => ";$len=strlen($value);$value=htmlspecialchars($value);if(is_bool($value))$return.=$value?"(bool) <strong>TRUE</strong>":"(bool) <strong>FALSE</strong>";elseif(is_int($value))$return.="(int:$len) <strong>$value</strong>";elseif(is_float($value))$return.="(float:$len) <strong>$value</strong>";elseif(is_numeric($value))$return.="(num:$len) <strong>$value</strong>";elseif(is_string($value))$return.="(string:$len) \"<strong>$value</strong>\"";else$return.="(unknown type) \"<strong>".(string)$value."</strong>\"";$return.="\n";}$return="<pre class=\"dump\">\n<strong>NeevoRow</strong> ($count) {\n$return}</pre>";}else$return='<pre class="dump">\n<strong>NeevoRow</strong> (empty)</pre>';}if($return_dump)return$return;echo$return;}}interface
INeevoCache{public
function
load($key);public
function
save($key,$value);}class
NeevoCacheSession
implements
INeevoCache{public
function
load($key){if(!isset($_SESSION['NeevoCache'][$key]))return
null;return$_SESSION['NeevoCache'][$key];}public
function
save($key,$value){$_SESSION['NeevoCache'][$key]=$value;}}class
NeevoCacheFile
implements
INeevoCache{private$filename,$data=array();public
function
__construct($filename){$this->filename=$filename;$this->data=unserialize(@file_get_contents($filename));}public
function
load($key){if(!isset($this->data[$key]))return
null;return$this->data[$key];}public
function
save($key,$value){$this->data[$key]=$value;file_put_contents($this->filename,serialize($this->data),LOCK_EX);}}class
Neevo{private$connection,$driver,$cache,$error_handler,$last,$queries,$error_reporting;public
static$ignore_deprecated=false;public
static$highlight_colors=array('columns'=>'#00f','chars'=>'#000','keywords'=>'#008000','joins'=>'#555','functions'=>'#008000','constants'=>'#f00');const
E_NONE=11;const
E_HANDLE=12;const
E_STRICT=13;const
VERSION="0.4dev";const
REVISION=137;const
BOOL=30;const
TEXT=33;const
BINARY=34;const
DATETIME=36;const
DATE=37;public
function
__construct($driver,INeevoCache$cache=null){if(!$driver)throw
new
NeevoException("Driver not defined.");$this->setDriver($driver);$this->cache=$cache;}public
function
__destruct(){$this->driver()->close();}public
function
connect(array$opts){$connection=$this->createConnection($opts);$this->setConnection($connection);return(bool)$connection;}public
function
connection(){return$this->connection;}public
function
createConnection(array$opts){return
new
NeevoConnection($this,$this->driver(),$opts['username'],$opts['password'],$opts['host'],$opts['database'],$opts['encoding'],$opts['table_prefix']);}public
function
useConnection(NeevoConnection$connection){$this->setConnection($connection);return$this;}private
function
setConnection(NeevoConnection$connection){$this->connection=$connection;}public
function
driver(){return$this->driver;}public
function
useDriver($driver){$this->setDriver($driver);return$this;}private
function
setDriver($driver){$class="NeevoDriver$driver";if(!$this->isDriver($class)){@include_once
dirname(__FILE__).'/neevo/drivers/'.strtolower($driver).'.php';if(!$this->isDriver($class))throw
new
NeevoException("Unable to create instance of Neevo driver '$driver' - corresponding class not found or not matching criteria.");}$this->driver=new$class($this);}private
function
isDriver($class){return(class_exists($class,false)&&in_array("INeevoDriver",class_implements($class,false))&&in_array("NeevoDriver",class_parents($class,false)));}public
function
cache(){return$this->cache;}public
function
cacheLoad($key){if(isset($this->cache))return$this->cache()->load($key);}public
function
cacheSave($key,$value){if(isset($this->cache))$this->cache()->save($key,$value);}public
function
last(){return$this->last;}public
function
setLast(NeevoQuery$last){$this->last=$last;}public
function
queries(){return$this->queries;}public
function
incrementQueries(){$this->queries++;}public
function
select($columns){$q=new
NeevoQuery($this);return$q->select($columns);}public
function
insert($table){$q=new
NeevoQuery($this);return$q->insert($table);}public
function
insertInto($table){return$this->insert($table);}public
function
update($table){$q=new
NeevoQuery($this);return$q->update($table);}public
function
delete($table=null){$q=new
NeevoQuery($this);return$q->delete($table);}public
function
sql($sql){$q=new
NeevoQuery($this);return$q->sql($sql);}public
function
errorReporting(){if(!isset($this->error_reporting))$this->error_reporting=self::E_HANDLE;return$this->error_reporting;}public
function
setErrorReporting($value){$this->error_reporting=$value;if(!isset($this->error_reporting))$this->error_reporting=self::E_HANDLE;}public
function
errorHandler(){$func=$this->error_handler;if((is_array($func)&&!method_exists($func[0],$func[1]))||(!is_array($func)&&!function_exists($func)))$this->error_handler=array('Neevo','defaultErrorHandler');return$this->error_handler;}public
function
setErrorHandler($handler_function){if(function_exists($handler_function))$this->error_handler=$handler_function;else$this->error_handler=array('Neevo','defaultErrorHandler');}public
function
error($neevo_msg){$level=$this->errorReporting();if($level!=Neevo::E_NONE){$msg=$this->driver()->error($neevo_msg);$exception=new
NeevoException($msg);if($level==Neevo::E_HANDLE)call_user_func($this->errorHandler(),$exception);if($level==Neevo::E_STRICT)throw$exception;}return
false;}public
static
function
defaultErrorHandler(NeevoException$exception){$message=$exception->getMessage();$trace=$exception->getTrace();if(!empty($trace)){$last=$trace[count($trace)-1];$line=$last['line'];$path=$last['file'];$act="occured";}else{$line=$exception->getLine();$path=$exception->getFile();$act="thrown";}$file=basename($path);$path=str_replace($file,"<strong>$file</strong>",$path);echo"<p><strong>Neevo exception</strong> $act in <em>$path</em> on <strong>line $line</strong>: $message</p>\n";}public
function
version($string=true){if($string)$return='Neevo '.self::VERSION.' (revision '.self::REVISION.').';else$return=array('version'=>self::VERSION,'revision'=>self::REVISION);return$return;}public
function
info($hide_password=true){$info=array('executed_queries'=>$this->queries(),'last_query'=>$this->last()->info($hide_password,true),'connection'=>$this->connection()->info($hide_password),'version'=>$this->version(false),'error_reporting'=>$this->errorReporting());return$info;}}class
NeevoException
extends
Exception{};class
NeevoLiteral{private$value;public
function
__construct($value){$this->value=$value;}public
function
__toString(){return$this->value;}}